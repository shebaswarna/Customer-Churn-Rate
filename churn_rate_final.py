# -*- coding: utf-8 -*-
"""Churn Rate_02

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13pOVL9P-QNrHnD-1YwGRGeK49WMcDNBO

# Importing Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""# Importing Data Set"""

dataset = pd.read_csv('Churn_data.csv')

dataset.head()

"""# Data Analysis cum Visualization"""

dataset.info()

dataset.loc[dataset.Churn=='No','Churn'] = 0             #changing the categorical column of "Churn" 
dataset.loc[dataset.Churn=='Yes','Churn'] = 1            #into numerical for better analysis

dataset.head()

dataset.describe()

dataset.isnull().sum()

dataset.duplicated().sum()

dataset.skew()

dataset.corr()

sns.heatmap(dataset.corr(),annot=True, cmap='crest')
plt.title('Heat Map Showing Correlation Between Different Numerical Regressors')
plt.show()

"""Making a plot of tenure"""

from matplotlib import rcParams
sns.histplot(dataset, x="tenure", kde = True, color= 'seagreen')
rcParams['figure.figsize'] = 10,7
plt.title('Tenure')
plt.show()

"""What Proportion Of Customers are Senior Citizen?

"""

ax = sns.countplot(x="SeniorCitizen", data=dataset)
for p in ax.patches:
    ax.annotate('{:.2f}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))
sns.set(rc={'figure.figsize':(7,7)})
plt.title('Senior Citizenship Status Quo')
plt.show()

citizen_data= dataset.SeniorCitizen.value_counts()
print(citizen_data)

#Visualization
plt.pie(citizen_data,labels=['No','Yes'],colors=['steelblue','skyblue'],shadow=True,autopct="%.1f%%")
plt.title('Senior Citizenship Proprtion')
plt.show()

"""Monthly Charges Distribution"""

sns.histplot(dataset, x="MonthlyCharges", kde = True)
plt.title('Monthly Charges Distribution')
plt.show()

"""Visualizing The Gender Diversity Among Customers

"""

gender_data= dataset.gender.value_counts()
print(gender_data)

#Visualization
plt.pie(gender_data,labels=['Male','Female'],colors=['skyblue','steelblue'],shadow=True,autopct="%.1f%%")
plt.title('Gender Proportion')
plt.show()

"""Customers : With or Without Partners!"""

partnership= dataset.Partner.value_counts()
print(partnership)

#Visualization
plt.pie(partnership,labels=['No','Yes'],colors=['skyblue','steelblue'],shadow=True,autopct="%.1f%%")
plt.title('Partners: Yes or No')
plt.show()

"""Customers : With or Without Dependents!"""

dp= dataset.Dependents.value_counts()
print(dp)

#Visualization
plt.pie(dp,labels=['No','Yes'],colors=['skyblue','steelblue'],shadow=True,autopct="%.1f%%")
plt.title('Dependents: Yes or No')
plt.show()

#Visualization
ax = sns.catplot(x='Dependents',hue = 'Churn',data=dataset,kind='count',palette='mako')
plt.title('Dependents Proportion ')
plt.show()

"""Churn rate based on Senior Citizenship"""

ax = sns.catplot(x='SeniorCitizen',hue = 'Churn',data=dataset,kind='count',palette='mako')
plt.title('Senior Citizenship Proportion ')
plt.show()

"""Churn rate based on PhoneService 

"""

sns.catplot(x='PhoneService', hue = 'Churn',data=dataset,kind='count',palette='mako')
plt.title('Phone Service')
plt.show()

"""Churn rate based on InternetService Among Customers

"""

sns.catplot(x='InternetService', hue = 'Churn',data=dataset,kind='count',palette='mako')
plt.title('Internet Service')
plt.show()

Service_Type_data= dataset.InternetService.value_counts()
print(Service_Type_data)

#Visualization
plt.pie(Service_Type_data,labels=['Fiber Optic','DSL','No Service'],colors=['palegreen','seagreen','mediumseagreen'],shadow=True,autopct="%.1f%%")
plt.title('Types Of Internet Services')
plt.show()

"""Churn rate based on Payment Method Adopted By Customers"""

chart = sns.catplot(x='PaymentMethod', hue = 'Churn',data=dataset,kind='count',palette='mako')
plt.title('Payment Method')
plt.xticks(
    rotation=45, 
    horizontalalignment='right',
    fontweight='light',  
)
plt.show()

payment_data= dataset.PaymentMethod.value_counts()
print(payment_data)

#Visualization
plt.pie(payment_data,labels=['Electronic Check','Mailed Check','Bank Transfer','Credit Card'],colors=['darkcyan','lightseagreen','paleturquoise','lightcyan'],shadow=True,autopct="%.1f%%")
plt.title('Payment Method Market Share')
plt.show()

"""Analyzing The Various Contract Types Among Customers"""

contract_data= dataset.Contract.value_counts()
print(contract_data)

#Visualization
plt.pie(contract_data,labels=['Month-to-month','Two year','One year'],colors=['indianred','rosybrown','coral'],shadow=True,autopct="%.1f%%")
plt.title('Payment Method Market Share')
plt.show()

"""# Analysing Numerical Data"""

dataset['StreamingMovies'].value_counts()
sns.countplot(x="StreamingMovies", data=dataset)

dataset['Churn'].value_counts()
sns.countplot(x="Churn", data=dataset)

churn_data= dataset.Churn.value_counts()
print(churn_data)
plt.pie(churn_data,labels=['No','Yes'],colors=['steelblue','skyblue'],shadow=True,autopct="%.1f%%")
plt.title('Churn Analysis')
plt.show()

"""# Data Cleaning"""

dataset["TotalCharges"] = pd.to_numeric(dataset['TotalCharges'],errors = 'coerce')

dataset.drop(['customerID'],axis = 1,inplace = True)

dataset.head(3)

df1=pd.get_dummies(data=dataset,columns=['gender', 'Partner', 'Dependents', 
       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',
       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',
       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod'],drop_first=True)

df1.head()

df1 = df1[['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges',
        'gender_Male', 'Partner_Yes', 'Dependents_Yes',
       'PhoneService_Yes', 'MultipleLines_No phone service',
       'MultipleLines_Yes', 'InternetService_Fiber optic',
       'InternetService_No', 'OnlineSecurity_No internet service',
       'OnlineSecurity_Yes', 'OnlineBackup_No internet service',
       'OnlineBackup_Yes', 'DeviceProtection_No internet service',
       'DeviceProtection_Yes', 'TechSupport_No internet service',
       'TechSupport_Yes', 'StreamingTV_No internet service', 'StreamingTV_Yes',
       'StreamingMovies_No internet service', 'StreamingMovies_Yes',
       'Contract_One year', 'Contract_Two year', 'PaperlessBilling_Yes',
       'PaymentMethod_Credit card (automatic)',
       'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check','Churn']]

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(missing_values=np.nan, strategy="mean")

df1.TotalCharges = imputer.fit_transform(df1["TotalCharges"].values.reshape(-1, 1))

df1.head()

df1.info()

"""# Deep Learning"""

import tensorflow as tf
tf.__version__

df1.head()

df1.corr()

X = df1.iloc[:,:-1].values
Y = df1.iloc[:,-1].values

print(X)

print(Y)

"""# Splitting the dataset into training and testset"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

print(y_test)

print(X_train)

print(y_train)

"""# Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""# Building an ANN

## Initializing the ANN
"""

ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=29, activation='relu'))
ann.add(tf.keras.layers.Dense(units=6, activation='relu'))
ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

"""## Training an ANN"""

X_train=np.asarray(X_train).astype(np.int)

y_train=np.asarray(y_train).astype(np.int)

y_train=np.asarray(y_train).astype(np.int)

y_test=np.asarray(y_test).astype(np.int)

print(X_train)

print(y_train)

ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

"""## Making Predictions on Testset"""

y_pred = ann.predict(X_test)

print(y_pred)

for i in range (0,y_pred.shape[0]):
  if y_pred[i] >0.5:
    y_pred[i] = 1
  else:
    y_pred[i]=0

y_pred

print(np.concatenate((y_pred.reshape(len(y_pred),1),  y_test.reshape(len(y_test),1)),1))

"""## Making Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""## Applying K-fold cross Validation"""

from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score

def build_model():
    ann = tf.keras.models.Sequential([
        tf.keras.layers.Dense(units=29, activation='relu'),
        tf.keras.layers.Dense(units=6, activation='relu'),
        tf.keras.layers.Dense(units=1, activation='sigmoid')])
    ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
    return ann

ann = build_model()

history = ann.fit(X_train, y_train, epochs=1)

keras_clf = KerasClassifier(build_model)

accuracies = cross_val_score(estimator=keras_clf, scoring="accuracy", 
    X=X_train, y=y_train, cv=5)

print(accuracies)

print("Accuracy: {:.2f} %".format(accuracies.mean()*100))

